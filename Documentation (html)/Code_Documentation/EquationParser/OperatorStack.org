#+title: OperatorStack
#+date: [2025-04-21 Mo]

* Variables
** top:
Points to the top of the stack.
** debug:
Toggles the debug prints.
-----
* Methods
** add():
Adds an [[./OperatorStackElement.html][OperatorStackElement]] on top of the stack.
** pop():
Removes one [[./OperatorStackElement.html][OperatorStackElement]] from the stack.
** cleanUp():
Removes all [[./OperatorStackElement.html][stack elements]] that have a [[./../EquationTree/EquationNode.html][EquationNode]] with a higher bracketDepth than the value passed to this method.
This is necessary since these elements are in enclosed brackets, which means that they are "done".

*For example:*
Given the following input "3*(1/3)+1" and assuming it has already been parsed up to the ")".
When returning a [[./OperatorStackElement.html][stack element]] in [[getLast():]] for the operator "+" in this case, it must search for operators on the same bracketDepth.
That is why [[cleanUp():]] is called at the beginning of [[getLast():]].

** getLast():
This method returns the right operator given a bracketDepth and operator level. The operator level indicates the order of operators.

| level | operators        |
|     0 | +-               |
|     1 | */               |
|     2 | ^                |
|     3 | specialFunctions |

In order to build a correct [[./../EquationTree/EquationTree.html][EquationTree]] in the [[./EquationParser.html][EquationParser]] it has to work the following way:

If the given level is greater than 1 it has to return the top element.

Otherwise we search for a "better" option (level 0).
If it is not found, we return either the first elment containing a [[./../EquationTree/EquationNode.html][EquationNode]] with the level 1 or the top element.

** printStack():
A debug method for printing the stack.
