import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.stage.Stage;

import java.util.ArrayList;
import java.util.Random;

public class HelloController {
  public ArrayList<Hideble> hideOnClick = new ArrayList<Hideble>();
  public Label welcomeText;
  public ImageView graphView;
  public TextField equationInput;
  public Pane equationList;
  public Pane root;
  public Pane equationInputPane;
  public Button extraInputButton;
  public Button addButton;
  public ScrollPane scrollPane;
  ArrayList<EquationVisElement> listElements = new ArrayList<EquationVisElement>();
  public IntObj equationListSize  = new IntObj(0);
  public RundColorPicker mainColorPicker;
  public Scene scene;
  
  private static TwoDVec<Double> defaultAddButtonPos;
  private static TwoDVec<Double> defaultExpandButtonPos;
  private static TwoDVec<Double> defaultInputPanePos;
  private static TwoDVec<Double> defaultGraphViewPos;
  private static TwoDVec<Double> defaultGraphViewSize;
  private static TwoDVec<Double> defaultEquationListPos;
  private static TwoDVec<Double> defaultEquationListSize;
  
  private static defaultInputPaneLength;
  private static final double defaultSceneHeight = 1080;
  private static final double defaultSceneWidth = 1920;
  private static final double defaultButtonSize = 70;
  private static final double textFieldSizeDiff = 20;
  private static final double graphViewEquationListHorizontalResizeRatio = 0.8;
  
  @FXML
  protected void onAddButtonClick() {
    equationListSize.increment();
    int len = listElements.size();
    listElements.add(new EquationVisElement(null,equationInput.getText(),equationList,root,scrollPane,30 + len*100,equationListSize,mainColorPicker.colorIndex));
    hideOnClick.add(listElements.get(listElements.size() - 1).colorPicker);
    if (listElements.size() > 8) {
      equationList.setPrefHeight(equationList.getHeight() + 100);
    }
    equationInput.setText("");
    mainColorPicker.pickColor(new Random().nextInt(15));
    setInputBarColor(mainColorPicker.colorValue);
  }
  
  public void setup() {
    TwoDVec<Double> colorPickPos = new TwoDVec<Double>(1650.0,15.0);
    mainColorPicker = new RundColorPicker(colorPickPos.x,colorPickPos.y,equationInputPane.getLayoutX(),equationInputPane.getLayoutY(), 0,true,root,this);
    equationInputPane.getChildren().add(mainColorPicker.displayButton);
    hideOnClick.add(mainColorPicker);
    
    setInputBarColor(mainColorPicker.colorValue);
    calculateDefaultSizes();
    scene = equationInput.getScene();
    resize();
    scene.widthProperty().addListener((obs, oldVal, newVal) -> {
      resize();
    });
    
    scene.heightProperty().addListener((obs, oldVal, newVal) -> {
      resize();
    });
  }
  
  public void calculateDefaultSizes() {
    defaultAddButtonPos = new TwoDVec<Double>(addButton.getLayoutX(), addButton.getLayoutY());
    defaultExpandButtonPos = new TwoDVec<Double>(extraInputButton.getLayoutX(), extraInputButton.getLayoutY());
    defaultInputPanePos = new TwoDVec<Double>(equationInputPane.getLayoutX(), equationInputPane.getLayoutY());
    defaultInputPaneLength = equationInputPane.getWidth();
    //defaultGraphViewPos = new TwoDVec<Double>(graphView.getLayoutX(), graphViewPan.getLayoutY());
  }
  
  public void resize() {
    double vertDiff =  defaultSceneHeight - (double)scene.getWindow().getHeight();
    double horzDiff = defaultSceneWidth - (double)scene.getWindow().getWidth();
    
    TwoDVec<Double> expandButtonPos = new TwoDVec<Double>(defaultExpandButtonPos.x, defaultExpandButtonPos.y - vertDiff);
    TwoDVec<Double> addButtonPos = new TwoDVec<Double>(defaultAddButtonPos.x - horzDiff, defaultExpandButtonPos.y - vertDiff);
    TwoDVec<Double> inputPanePos = new TwoDVec<Double>(expandButtonPos.x + defaultButtonSize, expandButtonPos.y);
    double inputPaneLegth = defaultInputPaneLength - horzDiff;
    
    moveTo(expandButtonPos,extraInputButton);
    moveTo(addButtonPos,addButton);
    moveTo(inputPanePos,equationInputPane);
    equationInputPane.setPrefWidth(inputPaneLegth);
    equationInput.setPrefWidth(inputPaneLegth - textFieldSizeDiff);
  }
  
  public void setInputBarColor(Color col) {
    String rgbCode = toRGBCode(col);
    equationInputPane.setStyle("-fx-border-color: " + toRGBCode(mainColorPicker.colorValue));
    addButton.setStyle("-fx-border-color: " + toRGBCode(mainColorPicker.colorValue));
    extraInputButton.setStyle("-fx-border-color: " + toRGBCode(mainColorPicker.colorValue));
  }
  
  public void hideRedundantElements() {
    for (int i = 0; i < hideOnClick.size(); i++) {
      hideOnClick.get(i).hide();
    }
  }
  
  private void moveTo(TwoDVec<Double> pos, Node node) {
    node.setLayoutX(pos.x);
    node.setLayoutY(pos.y);
  }
  
  private static String toRGBCode( Color color )
  {
    return String.format( "#%02X%02X%02X",
    (int)( color.getRed() * 255 ),
    (int)( color.getGreen() * 255 ),
    (int)( color.getBlue() * 255 ) );
  }
  
}